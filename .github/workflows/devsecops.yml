name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  security-events: write

env:
  AWS_REGION: ap-south-1
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}

jobs:
  security-audit:
    name: Auditing and vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js Environmennt
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install Node Dependencies
        working-directory: app
        run: npm ci

      - name: Run NPM Audit (High and Above)
        working-directory: app
        run: npm audit --audit-level high

  sast-analysis:
    name: Semgrep SAST Analysis
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  container-image-scan:
    name: Container Vulnerability & Best Practices Scan
    runs-on: ubuntu-latest
    needs: code-sast-analysis
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} ./app

      - name: Run Trivy vulnerability scanner (json output))
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'json'
          severity: 'CRITICAL'
          exit-code: '1'

      - name: Run Trivy vulnerability scanner (SARIF output for GitHub upload)
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Dockle for Dockerfile Linting
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/root/.cache/ goodwithtech/dockle:latest \
            --exit-code 1 --exit-level WARN ${{ env.IMAGE_NAME }}:${{ github.sha }}

  image-build-and-publish:
    name: Build, Tag, Sign & Push Docker Image
    runs-on: ubuntu-latest
    needs: container-image-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./app

      - name: Tag Docker Image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest

      - name: Install Cosign CLI
        uses: sigstore/cosign-installer@v3.5.0
        
      - name: Get OIDC Token for Sigstore
        id: oidc
        run: |
          echo "OIDC_TOKEN=$(curl -sSf -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=sigstore" | jq -r .value)" >> $GITHUB_ENV

      - name: Sign and Verify Docker Images with Cosign
        run: |
          cosign sign --yes --identity-token "${{ env.OIDC_TOKEN }}" \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cosign sign --yes --identity-token "${{ env.OIDC_TOKEN }}" \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest 
          cosign verify \
          --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/.*" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cosign verify \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest \
          --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/.*" \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \

  infra-code-scan:
    name: Infrastructure Code Security Scan (tfsec)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec on Terraform (Soft Fail)
        working-directory: infrastructure
        run: |
          tfsec . \
            --soft-fail \
            --minimum-severity HIGH \
            --format sarif \
            --out tfsec-results.sarif

  terraform-deploy:
    name: Deploy to AWS (Terraform)
    runs-on: ubuntu-latest
    needs: [image-build-and-publish, infra-code-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: dev
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure
        run: terraform plan -var="image_tag=${{ github.sha }}"

      - name: Terraform Apply
        working-directory: infrastructure
        run: terraform apply -auto-approve -var="image_tag=${{ github.sha }}"