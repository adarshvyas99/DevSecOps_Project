name: DevSecOps Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1                        
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}


jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json

    - name: Install dependencies
      working-directory: app
      run: npm ci

    - name: Run Semgrep SAST
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/nodejs
        generateSarif: "1"
        paths: app
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Run npm audit
      working-directory: app
      run: npm audit --audit-level high

  container-security:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4


    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} ./app

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        context: ./app
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Dockle for Dockerfile best practices
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/root/.cache/ goodwithtech/dockle:latest \
          --exit-code 1 --exit-level WARN ${{ env.IMAGE_NAME }}:${{ github.sha }}

  infra-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tfsec on Terraform
      working-directory: infrastructure
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        tfsec .

  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./app

    - name: Tag Docker image for ECR
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.TF_ECR_REPO_URL }}:latest

    - name: Install cosign
      uses: sigstore/cosign-installer@v3.5.0

    - name: Sign container image with cosign (OIDC)
      run: |
        cosign sign --yes ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        cosign sign --yes ${{ secrets.TF_ECR_REPO_URL }}:latest
        cosign verify --certificate-oidc-issuer https://token.actions.githubusercontent.com \
          --certificate-oidc-subject ${{ github.actor }} \
          --certificate-oidc-audience ${{ github.repository }} \
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}